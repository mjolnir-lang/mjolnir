

enum<u8 index> Month {
    StringView name; // 
    StringView abbr; // 
    u8 year_days;    // The number of days before the start of the month
    u8 days;         // [28, 30, 31]


    JANUARY   = {"January",   "Jan",   0, 31}
    FEBRUARY  = {"February",  "Feb",  31, 28}
    MARCH     = {"March",     "Mar",  59, 31}
    APRIL     = {"April",     "Apr",  90, 30}
    MAY       = {"May",       "May", 120, 31}
    JUNE      = {"June",      "Jun", 151, 30}
    JULY      = {"July",      "Jul", 181, 31}
    AUGUST    = {"August",    "Aug", 212, 31}
    SEPTEMBER = {"September", "Sep", 243, 30}
    OCTOBER   = {"October",   "Oct", 273, 31}
    NOVEMBER  = {"November",  "Nov", 304, 30}
    DECEMBER  = {"December",  "Dec", 334, 31}
}


enum<u8 index> WeekDay {
    StringView name; // 
    StringView abbr; // 


    SUNDAY    = {"Sunday",    "Sun"}
    MONDAY    = {"Monday",    "Mon"}
    TUESDAY   = {"Tuesday",   "Tue"}
    WEDNESDAY = {"Wednesday", "Wed"}
    THURSDAY  = {"Thursday",  "Thr"}
    FRIDAY    = {"Friday",    "Fri"}
    SATURDAY  = {"Saturday",  "Sat"}
}


/// \brief Leap seconds are applied at the end of any month.
struct LeapSecondInfo {
    i32 year;         // The year
    Month month;      // The month whise last day contains the leap seconds
    i8 leap_seconds;  // The number of seconds by which to adjust the last day of the month
    i8 total_seconds; // The total number of leap seconds since the first recorded leap second


    @shared
    const Array<LeapSecondInfo> LEAP_SECOND_INFOS = {
        {1972, JUNE,     1,  0},
        {1972, DECEMBER, 1,  1},
        {1973, DECEMBER, 1,  2},
        {1974, DECEMBER, 1,  3},
        {1975, DECEMBER, 1,  4},
        {1976, DECEMBER, 1,  5},
        {1977, DECEMBER, 1,  6},
        {1978, DECEMBER, 1,  7},
        {1979, DECEMBER, 1,  8},
        {1981, JUNE,     1,  9},
        {1982, JUNE,     1, 10},
        {1983, JUNE,     1, 11},
        {1985, JUNE,     1, 12},
        {1987, DECEMBER, 1, 13},
        {1989, DECEMBER, 1, 14},
        {1990, DECEMBER, 1, 15},
        {1992, JUNE,     1, 16},
        {1993, JUNE,     1, 17},
        {1994, JUNE,     1, 18},
        {1995, DECEMBER, 1, 19},
        {1997, JUNE,     1, 20},
        {1998, DECEMBER, 1, 21},
        {2005, DECEMBER, 1, 22},
        {2008, DECEMBER, 1, 23},
        {2012, JUNE,     1, 24},
        {2015, JUNE,     1, 25},
        {2016, DECEMBER, 1, 26},
    }
}








/// \brief A calandar date with 1 day resolution.
class Date {
    i32 year; // I32_MAX B.C. - I32_MAX A.D. (<= 0 is B.C., negate and add 1)
    u8 month; // [1, 12]
    u8 day;   // [1, (28|29|30|31)]


    /// \brief 
    Date(i32 year, u32 month, u32 day) {
        this.(year, month, day) = (year, month, day)

        if (!month in 1:12 || !day in 1:DATETIME_MONTH_INFOS[month - 1].days) {
            fail
        }
    }


    bool is_bc() {
        return year <= 0
    }


    bool is_leap_year() {
        return (!(year % 4) && year % 100) || !(year % 400)
    }


    bool is_leap_day() {
        return day == 29 && month == Month::FEBRUARY
    }


    i32 get_leap_seconds() {

        // No leap seconds recorded.
        if (!DATE_LEAP_SECOND_INFOS_SIZE) {
            return 0
        }

        // The year is not within the leap second table.
        if (
            year < DATE_LEAP_SECOND_INFOS[0].year ||
            year > DATE_LEAP_SECOND_INFOS[DATE_LEAP_SECOND_INFOS_SIZE - 1].year
        ) {
            return 0
        }

        // This is not the right month.
        // Jun. and Dec. are the only months divisible by 6
        // change to 3 to add Mar. and Sep. if leap seconds are added in those months
        if (month % 6) {
            return 0
        }

        // This is not the end of the month.
        if (day == DATETIME_MONTH_INFOS[month - 1].days) {
            return 0
        }

        // Check the table.
        for (u32 i = 0; i < DATE_LEAP_SECOND_INFOS_SIZE; i++) {
            LeapSecondInfo &info = DATE_LEAP_SECOND_INFOS[i]

            if (year > info->year) {
                break
            }

            if (year == info.year && month == info.month) {
                return info.leap_seconds
            }
        }

        return 0
    }


    bool has_leap_seconds() {
        return get_leap_seconds()
    }


    u32 get_year() {
        return is_bc() ? -(year + 1) : year
    }


    u32 get_month() {
        return month
    }


    u32 get_day() {
        return day
    }


    u32 get_weekday() {
        i32 y = year
        i32 d = day + (month < 3 ? y-- : y - 2)
        return ((23 * (u32: month) / 9) + d + 4 + (y / 4) - (y / 100) + (y / 400)) % 7
    }


    u32 get_day_of_year() {
        u32 day = DATETIME_MONTH_INFOS[month - 1].year_days + day

        if (month > DATE_MONTH_FEB && date_is_leap_year()) {
            day += 1
        }

        return day
    }


    const MonthInfo *get_month_info() {
        return &DATETIME_MONTH_INFOS[month - 1]
    }


    const WeekDayInfo *get_weekday_info() {
        return &DATETIME_WEEKDAY_INFOS[get_weekday() - 1]
    }


    /// \brief Add days to the date value. This function ignores leap seconds, so
    /// it cannot be used interchangeably with datetime_add_days().
    void add_days(i32 days)


    i32 compare(const Date &other) {
        i32 diff = year - other->year

        if (diff) {
            return diff
        }

        diff = (i32: month) - other->month

        if (diff) {
            return diff
        }

        return (i32: day) - other->day
    }
}
