

/// ADD (extended register)
///
/// Add (extended register) adds a register value and a sign or zero-extended register value, followed by an optional left shift amount, and writes the result to the destination register. The argument that is extended from the <Rm> register can be a byte, halfword, word, or doubleword.
class AddExtendedRegister {
    bitfield<u32> {
        [31] bool sf;
        [30] u8 op = 0;
        [29] u8 s = 0;
        [28:21] = 0b01011001u;
        [20:16] u8 rm;
        [15:13] u8 option;
        [12:10] u8 imm3;
        [9:5] u8 rn;
        [4:0] u8 rd;
    }


    Add(bool sf, u8 rm, u8 option, u8 imm3, u8 rn, u8 rd) {
        this = {
            .sf = sf;
            .rm = rm;
            .option = option;
            .imm3 = imm3;
            .rn = rn;
            .rd = rd;
        };
    }
}


void operation() {

    // Decode
    ExtendType extend_type = DecodeRegExtend(option);
    u8 shift = UInt(imm3);

    if (shift > 4) {
        // UNDEFINED;
        fail;
    }

    // Execute
    if (sf) {
        u64 result;
        u64 operand1 = (rn == 31) ? SP()[63:0] : X(rn, 64);
        u64 operand2 = ExtendReg(rm, extend_type, shift, 64);
        (result, _) = AddWithCarry(operand1, operand2, '0');

        if (rd == 31) {
            SP() = ZeroExtend(result, 64);
        } else {
            X(rd, 64) = result;
        }
    } else {
        u32 result;
        u32 operand1 = (rn == 31) ? SP()[31:0] : X(rn, 32);
        u32 operand2 = ExtendReg(rm, extend_type, shift, 64);
        (result, _) = AddWithCarry(operand1, operand2, '0');

        if (rd == 31) {
            SP() = ZeroExtend(result, 64);
        } else {
            X(rd, 32) = result;
        }
    }
}
