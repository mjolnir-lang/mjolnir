
class Cpu {


    //////
    ////// Basic Execution Environment
    //////


    ///
    /// Address Space
    ///


    ///
    /// Basic Program Execution Registers
    ///


    /// EAX
    ///
    /// Accumulator for operands and results data.
    bitfield<u32> eax {
        [15:0] u16 ax;
        [15:8] u8 ah;
        [7:0] u8 al;
    }

    /// EBX
    ///
    /// Pointer to data in the DS segment.
    bitfield<u32> ebx {
        [15:0] u16 bx;
        [15:8] u8 bh;
        [7:0] u8 bl;
    }

    /// ECX
    ///
    /// Counter for string and loop operations.
    bitfield<u32> ecx {
        [15:0] u16 cx;
        [15:8] u8 ch;
        [7:0] u8 cl;
    }

    /// EDX
    ///
    /// I/O pointer.
    bitfield<u32> edx {
        [15:0] u16 dx;
        [15:8] u8 dh;
        [7:0] u8 dl;
    }

    /// ESI
    ///
    /// Pointer to data in the segment pointed to by the DS register; source pointer for string operations.
    bitfield<u32> esi {
        [15:0] u16 si;
    }

    /// EDI
    ///
    /// Pointer to data (or destination) in the segment pointed to by the ES register; destination pointer for string operations.
    bitfield<u32> edi {
        [15:0] u16 di;
    }

    /// Stack Pointer (ESP)
    ///
    /// Stack pointer (in the SS segment).
    bitfield<u32> esp {
        [15:0] u16 sp;
    }

    /// EBP
    ///
    /// Pointer to data on the stack (in the SS segment).
    bitfield<u32> ebp {
        [15:0] u16 bp;
    }

    /// Instruction Pointer (EIP)
    ///
    /// The instruction pointer (EIP) register contains the offset in the current code segment for the next instruction to be
    /// executed. It is advanced from one instruction boundary to the next in straight-line code or it is moved ahead or
    /// backwards by a number of instructions when executing JMP, Jcc, CALL, RET, and IRET instructions.
    ///
    /// The EIP register cannot be accessed directly by software; it is controlled implicitly by control-transfer instructions
    /// (such as JMP, Jcc, CALL, and RET), interrupts, and exceptions. The only way to read the EIP register is to execute a
    /// CALL instruction and then read the value of the return instruction pointer from the procedure stack. The EIP
    /// register can be loaded indirectly by modifying the value of a return instruction pointer on the procedure stack and
    /// executing a return instruction (RET or IRET).
    ///
    /// All IA-32 processors prefetch instructions. Because of instruction prefetching, an instruction address read from the
    /// bus during an instruction load does not match the value in the EIP register. Even though different processor gener-
    /// ations use different prefetching mechanisms, the function of the EIP register to direct program flow remains fully
    /// compatible with all software written to run on IA-32 processors.
    u32 eip;

    /// EFLAGS Register (EFLAGS)
    ///
    /// The 32-bit EFLAGS register contains a group of status flags, a control flag, and a group of system flags. Figure 3-8
    /// defines the flags within this register. Following initialization of the processor (either by asserting the RESET pin or
    /// the INIT pin), the state of the EFLAGS register is 0x00000002. Bits 1, 3, 5, 15, and 22 through 31 of this register
    /// are reserved. Software should not use or depend on the states of any of these bits.
    ///
    /// Some of the flags in the EFLAGS register can be modified directly, using special-purpose instructions (described in
    /// the following sections). There are no instructions that allow the whole register to be examined or modified directly.
    /// The following instructions can be used to move groups of flags to and from the procedure stack or the EAX register:
    /// LAHF, SAHF, PUSHF, PUSHFD, POPF, and POPFD. After the contents of the EFLAGS register have been transferred to
    /// the procedure stack or EAX register, the flags can be examined and modified using the processor's bit manipulation
    /// instructions (BT, BTS, BTR, and BTC).
    ///
    /// When suspending a task (using the processor's multitasking facilities), the processor automatically saves the state
    /// of the EFLAGS register in the task state segment (TSS) for the task being suspended. When binding itself to a new
    /// task, the processor loads the EFLAGS register with data from the new task's TSS.
    ///
    /// When a call is made to an interrupt or exception handler procedure, the processor automatically saves the state of
    /// the EFLAGS registers on the procedure stack. When an interrupt or exception is handled with a task switch, the
    /// state of the EFLAGS register is saved in the TSS for the task being suspended.
    ///
    /// As the IA-32 Architecture has evolved, flags have been added to the EFLAGS register, but the function and place-
    /// ment of existing flags have remained the same from one family of the IA-32 processors to the next. As a result,
    /// code that accesses or modifies these flags for one family of IA-32 processors works as expected when run on later
    /// families of processors.
    bitfield<u32> eflags {

        @reserved
        [31:22];

        /// ID Flag (ID)
        ///
        /// The ability of a program to set or clear this flag indicates support for the CPUID instruction.
        [21] bool id;

        /// Virtual Interrupt Pending (VIP)
        ///
        /// Set to indicate that an interrupt is pending; clear when no interrupt is pending. (Software sets and clears this flag; the processor only reads it.) Used in conjunction with the VIF flag.
        [20] bool vip;

        /// Virtual Interrupt Flag (VIF)
        ///
        /// Virtual image of the IF flag. Used in conjunction with the VIP flag. (To use this flag and the VIP flag the virtual mode extensions are enabled by setting the VME flag in control register CR4.)
        [19] bool vif;

        /// Alignment Check / Access Control (AC)
        ///
        /// If the AM bit is set in the CR0 register, alignment checking of user-mode data accesses is enabled if and only if this flag is 1.
        ///
        /// If the SMAP bit is set in the CR4 register, explicit supervisor-mode data accesses to user-mode pages are allowed if and only if this bit is 1.
        [18] bool ac;

        /// Virtual-8086 Mode (VM)
        ///
        /// Set to enable virtual-8086 mode; clear to return to protected mode without virtual-8086 mode semantics.
        [17] bool vm;

        /// Resume Flag (RF)
        ///
        /// Controls the processor's response to debug exceptions.
        [16] bool rf;

        @reserved
        [15];

        /// Nested Task (NT)
        ///
        /// Controls the chaining of interrupted and called tasks. Set when the current task is linked to the previously executed task; cleared when the current task is not linked to another task.
        [14] bool nt;

        /// I/O Privilege Level (IOPL)
        ///
        /// Indicates the I/O privilege level of the currently running program or task. The current privilege level (CPL) of the currently running program or task must be less than or equal to the I/O privilege level to access the I/O address space. The POPF and IRET instructions can modify this field only when operating at a CPL of 0.
        [13:12] bool iopl;

        /// Overflow Flag (OF)
        ///
        /// Set if the integer result is too large a positive number or too small a negative number (excluding the sign-bit) to fit in the destination operand; cleared otherwise. This flag indicates an overflow condition for signed-integer (two's complement) arithmetic.
        [11] bool of;

        /// Direction Flag (DF)
        ///
        /// The direction flag (DF, located in bit 10 of the EFLAGS register) controls string instructions (MOVS, CMPS, SCAS, LODS, and STOS). Setting the DF flag causes the string instructions to auto-decrement (to process strings from high addresses to low addresses). Clearing the DF flag causes the string instructions to auto-increment (process strings from low addresses to high addresses).
        ///
        /// The STD and CLD instructions set and clear the DF flag, respectively.
        [10] bool df;

        /// Interrupt Enable Flag (IF)
        ///
        /// Controls the response of the processor to maskable interrupt requests. Set to respond to maskable interrupts; cleared to inhibit maskable interrupts.
        [9] bool if;

        /// Trap Flag (TF)
        ///
        /// Set to enable single-step mode for debugging; clear to disable single-step mode.
        [8] bool tf;

        /// Sign Flag (SF)
        ///
        /// Set equal to the most-significant bit of the result, which is the sign bit of a signed integer. (0 indicates a positive value and 1 indicates a negative value.)
        [7] bool sf;

        /// Zero Flag (ZF)
        ///
        /// Set if the result is zero; cleared otherwise.
        [6] bool zf;

        /// Auxiliary Carry Flag (AF)
        ///
        /// Set if an arithmetic operation generates a carry or a borrow out of bit 3 of the result; cleared otherwise. This flag is used in binary-coded decimal (BCD) arithmetic.
        [4] bool af;

        /// Parity Flag (PF)
        ///
        /// Set if the least-significant byte of the result contains an even number of 1 bits; cleared otherwise.
        [2] bool pf;

        /// Carry Flag (CF)
        ///
        /// Set if an arithmetic operation generates a carry or a borrow out of the most-significant bit of the result; cleared otherwise. This flag indicates an overflow condition for unsigned-integer arithmetic. It is also used in multiple-precision arithmetic.
        [0] bool cf;
    }

    ///
    /// x87 FPU Registers
    ///


    ///
    /// MMX Registers
    ///


    ///
    /// XMM Registers
    ///


    ///
    /// YMM Regsiters
    ///


    ///
    /// Bounds Registers
    ///


    ///
    /// BNDCFGU and BNDSTATUS
    ///


    //////
    ////// System Level Architecture
    //////


    ///
    /// I/O Ports
    ///


    ///
    /// Control Registers
    ///


    ///
    /// Memory Management Registers
    ///


    ///
    /// Debug Registers
    ///


    ///
    /// Model-Specific Registers
    ///


    ///
    /// Machine Check Registers
    ///

}



class Cpu64BitMode {

    bitfield<u64> {
        [63:0] u64 rax;

        /// EAX
        ///
        /// Accumulator for operands and results data.
        [31:0] u32 eax;
        [15:0] u16 ax;
        [7:0] u8 al;
    }

    bitfield<u64> {
        [63:0] u64 rbx;

        /// EBX
        ///
        /// Pointer to data in the DS segment.
        [31:0] u32 ebx;
        [15:0] u16 bx;
        [7:0] u8 bl;
    }

    bitfield<u64> {
        [63:0] u64 rcx;

        /// ECX
        ///
        /// Counter for string and loop operations.
        [31:0] u32 ecx;
        [15:0] u16 cx;
        [7:0] u8 cl;
    }

    bitfield<u64> {
        [63:0] u64 rdx;

        /// EDX
        ///
        /// I/O pointer.
        [31:0] u32 edx;
        [15:0] u16 dx;
        [7:0] u8 dl;
    }

    bitfield<u64> {
        [63:0] u64 rsi;

        /// ESI
        ///
        /// Pointer to data in the segment pointed to by the DS register; source pointer for string operations.
        [31:0] u32 esi;
        [15:0] u16 si;
        [7:0] u8 sil;
    }

    bitfield<u64> {
        [63:0] u64 rdi;

        /// EDI
        ///
        /// Pointer to data (or destination) in the segment pointed to by the ES register; destination pointer for string operations.
        [31:0] u32 edi;
        [15:0] u16 di;
        [7:0] u8 dil;
    }

    bitfield<u64> {
        [63:0] u64 rsp;

        /// ESP
        ///
        /// Stack pointer (in the SS segment).
        [31:0] u32 esp;
        [15:0] u16 sp;
        [7:0] u8 spl;
    }

    bitfield<u64> {
        [63:0] u64 rbp;

        /// EBP
        ///
        /// Pointer to data on the stack (in the SS segment).
        [31:0] u32 ebp;
        [15:0] u16 bp;
        [7:0] u8 bpl;
    }


    /// Instruction Pointer in 64-Bit Mode (RIP)
    ///
    /// In 64-bit mode, the RIP register becomes the instruction pointer. This register holds the 64-bit offset of the next
    /// instruction to be executed. 64-bit mode also supports a technique called RIP-relative addressing. Using this tech-
    /// nique, the effective address is determined by adding a displacement to the RIP of the next instruction.
    u64 rip;


    bitfield<u64> rflags {
        // same as eflags with upper 32 bits reserved
    }
}