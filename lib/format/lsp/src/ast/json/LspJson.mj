 TextDocumentItem

An item to transfer a text document from the client to the server.

interface TextDocumentItem {

    /// The text document's URI.
    ////
    uri: DocumentUri;


    /// The text document's language identifier.
    ////
    languageId: string;


    /// The version number of this document (it will increase after each
    /// change, including undo/redo).
    ////
    version: integer;


    /// The content of the opened text document.
    ////
    text: string;
}

Text documents have a language identifier to identify a document on the server side when it handles more than one language to avoid re-interpreting the file extension. If a document refers to one of the programming languages listed below it is recommended that clients use those ids.
Language     Identifier

ABAP     abap
Windows Bat     bat
BibTeX     bibtex
Clojure     clojure
Coffeescript     coffeescript
C     c
C++     cpp
C#     csharp
CSS     css
Diff     diff
Dart     dart
Dockerfile     dockerfile
Elixir     elixir
Erlang     erlang
F#     fsharp
Git     git-commit and git-rebase
Go     go
Groovy     groovy
Handlebars     handlebars
HTML     html
Ini     ini
Java     java
JavaScript     javascript
JavaScript React     javascriptreact
JSON     json
LaTeX     latex
Less     less
Lua     lua
Makefile     makefile
Markdown     markdown
Objective-C     objective-c
Objective-C++     objective-cpp
Perl     perl
Perl 6     perl6
PHP     php
Powershell     powershell
Pug     jade
Python     python
R     r
Razor (cshtml)     razor
Ruby     ruby
Rust     rust
SCSS     scss (syntax using curly brackets), sass (indented syntax)
Scala     scala
ShaderLab     shaderlab
Shell Script (Bash)     shellscript
SQL     sql
Swift     swift
TypeScript     typescript
TypeScript React     typescriptreact
TeX     tex
Visual Basic     vb
XML     xml
XSL     xsl
YAML     yaml


TextDocumentIdentifier

Text documents are identified using a URI. On the protocol level, URIs are passed as strings. The corresponding JSON structure looks like this:

interface TextDocumentIdentifier {

    /// The text document's URI.
    ////
    uri: DocumentUri;
}

VersionedTextDocumentIdentifier

An identifier to denote a specific version of a text document. This information usually flows from the client to the server.

interface VersionedTextDocumentIdentifier extends TextDocumentIdentifier {

    /// The version number of this document.
    ///
    /// The version number of a document will increase after each change,
    /// including undo/redo. The number doesn't need to be consecutive.
    ////
    version: integer;
}

An identifier which optionally denotes a specific version of a text document. This information usually flows from the server to the client.

interface OptionalVersionedTextDocumentIdentifier extends TextDocumentIdentifier {

    /// The version number of this document. If an optional versioned text document
    /// identifier is sent from the server to the client and the file is not
    /// open in the editor (the server has not received an open notification
    /// before) the server can send `null` to indicate that the version is
    /// known and the content on disk is the master (as specified with document
    /// content ownership).
    ///
    /// The version number of a document will increase after each change,
    /// including undo/redo. The number doesn't need to be consecutive.
    ////
    version: integer | null;
}

TextDocumentPositionParams

Was TextDocumentPosition in 1.0 with inlined parameters.

A parameter literal used in requests to pass a text document and a position inside that document. It is up to the client to decide how a selection is converted into a position when issuing a request for a text document. The client can for example honor or ignore the selection direction to make LSP request consistent with features implemented internally.

interface TextDocumentPositionParams {

    /// The text document.
    ////
    textDocument: TextDocumentIdentifier;


    /// The position inside the text document.
    ////
    position: Position;
}

DocumentFilter

A document filter denotes a document through properties like language, scheme or pattern. An example is a filter that applies to TypeScript files on disk. Another example is a filter that applies to JSON files with name package.json:

{ language: 'typescript', scheme: 'file' }
{ language: 'json', pattern: '**/package.json' }

interface DocumentFilter {

    /// A language id, like `typescript`.
    ////
    language?: string;


    /// A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
    ////
    scheme?: string;


    /// A glob pattern, like `*.{ts,js}`.
    ///
    /// Glob patterns can have the following syntax:
    /// - `*` to match one or more characters in a path segment
    /// - `?` to match on one character in a path segment
    /// - `**` to match any number of path segments, including none
    /// - `{}` to group sub patterns into an OR expression. (e.g. `**​/*.{ts,js}`
    ///   matches all TypeScript and JavaScript files)
    /// - `[]` to declare a range of characters to match in a path segment
    ///   (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
    /// - `[!...]` to negate a range of characters to match in a path segment
    ///   (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but
    ///   not `example.0`)
    ////
    pattern?: string;
}

Please note that for a document filter to be valid at least one of the properties for language, scheme, or pattern must be set. To keep the type definition simple all properties are marked as optional.

A document selector is the combination of one or more document filters.

type DocumentSelector = DocumentFilter[];

TextEdit & AnnotatedTextEdit

    New in version 3.16: Support for AnnotatedTextEdit.

A textual edit applicable to a text document.

interface TextEdit {

    /// The range of the text document to be manipulated. To insert
    /// text into a document create a range where start === end.
    ////
    range: Range;


    /// The string to be inserted. For delete operations use an
    /// empty string.
    ////
    newText: string;
}

Since 3.16.0 there is also the concept of an annotated text edit which supports to add an annotation to a text edit. The annotation can add information describing the change to the text edit.


/// Additional information that describes document changes.
///
@api(3.16)
////
interface ChangeAnnotation {

    /// A human-readable string describing the actual change. The string
    /// is rendered prominent in the user interface.
    ////
    label: string;


    /// A flag which indicates that user confirmation is needed
    /// before applying the change.
    ////
    needsConfirmation?: boolean;


    /// A human-readable string which is rendered less prominent in
    /// the user interface.
    ////
    description?: string;
}

Usually clients provide options to group the changes along the annotations they are associated with. To support this in the protocol an edit or resource operation refers to a change annotation using an identifier and not the change annotation literal directly. This allows servers to use the identical annotation across multiple edits or resource operations which then allows clients to group the operations under that change annotation. The actual change annotations together with their identifiers are managed by the workspace edit via the new property changeAnnotations.


/// An identifier referring to a change annotation managed by a workspace
/// edit.
///
@api(3.16).
////
type ChangeAnnotationIdentifier = string;


/// A special text edit with an additional change annotation.
///
@api(3.16).
////
interface AnnotatedTextEdit extends TextEdit {

    /// The actual annotation identifier.
    ////
    annotationId: ChangeAnnotationIdentifier;
}

TextEdit[]

Complex text manipulations are described with an array of TextEdit’s or AnnotatedTextEdit’s, representing a single change to the document.

All text edits ranges refer to positions in the document they are computed on. They therefore move a document from state S1 to S2 without describing any intermediate state. Text edits ranges must never overlap, that means no part of the original document must be manipulated by more than one edit. However, it is possible that multiple edits have the same start position: multiple inserts, or any number of inserts followed by a single remove or replace edit. If multiple inserts have the same position, the order in the array defines the order in which the inserted strings appear in the resulting text.
TextDocumentEdit

    New in version 3.16: support for AnnotatedTextEdit. The support is guarded by the client capability workspace.workspaceEdit.changeAnnotationSupport. If a client doesn’t signal the capability, servers shouldn’t send AnnotatedTextEdit literals back to the client.

Describes textual changes on a single text document. The text document is referred to as a OptionalVersionedTextDocumentIdentifier to allow clients to check the text document version before an edit is applied. A TextDocumentEdit describes all changes on a version Si and after they are applied move the document to version Si+1. So the creator of a TextDocumentEdit doesn’t need to sort the array of edits or do any kind of ordering. However the edits must be non overlapping.

interface TextDocumentEdit {

    /// The text document to change.
    ////
    textDocument: OptionalVersionedTextDocumentIdentifier;


    /// The edits to be applied.
    ///
    @api(3.16) - support for AnnotatedTextEdit. This is guarded by the
    /// client capability `workspace.workspaceEdit.changeAnnotationSupport`
    ////
    edits: (TextEdit | AnnotatedTextEdit)[];
}

Location

Represents a location inside a resource, such as a line inside a text file.

interface Location {
    uri: DocumentUri;
    range: Range;
}

LocationLink

Represents a link between a source and a target location.

interface LocationLink {


    /// Span of the origin of this link.
    ///
    /// Used as the underlined span for mouse interaction. Defaults to the word
    /// range at the mouse position.
    ////
    originSelectionRange?: Range;


    /// The target resource identifier of this link.
    ////
    targetUri: DocumentUri;


    /// The full target range of this link. If the target for example is a symbol
    /// then target range is the range enclosing this symbol not including
    /// leading/trailing whitespace but everything else like comments. This
    /// information is typically used to highlight the range in the editor.
    ////
    targetRange: Range;


    /// The range that should be selected and revealed when this link is being
    /// followed, e.g the name of a function. Must be contained by the
    /// `targetRange`. See also `DocumentSymbol#range`
    ////
    targetSelectionRange: Range;
}

Diagnostic

Represents a diagnostic, such as a compiler error or warning. Diagnostic objects are only valid in the scope of a resource.

interface Diagnostic {

    /// The range at which the message applies.
    ////
    range: Range;


    /// The diagnostic's severity. Can be omitted. If omitted it is up to the
    /// client to interpret diagnostics as error, warning, info or hint.
    ////
    severity?: DiagnosticSeverity;


    /// The diagnostic's code, which might appear in the user interface.
    ////
    code?: integer | string;


    /// An optional property to describe the error code.
    ///
    @api(3.16)
    ////
    codeDescription?: CodeDescription;


    /// A human-readable string describing the source of this
    /// diagnostic, e.g. 'typescript' or 'super lint'.
    ////
    source?: string;


    /// The diagnostic's message.
    ////
    message: string;


    /// Additional metadata about the diagnostic.
    ///
    @api(3.15)
    ////
    tags?: DiagnosticTag[];


    /// An array of related diagnostic information, e.g. when symbol-names within
    /// a scope collide all definitions can be marked via this property.
    ////
    relatedInformation?: DiagnosticRelatedInformation[];


    /// A data entry field that is preserved between a
    /// `textDocument/publishDiagnostics` notification and
    /// `textDocument/codeAction` request.
    ///
    @api(3.16)
    ////
    data?: unknown;
}

The protocol currently supports the following diagnostic severities and tags:

namespace DiagnosticSeverity {

    /// Reports an error.
    ////
    const Error: 1 = 1;

    /// Reports a warning.
    ////
    const Warning: 2 = 2;

    /// Reports an information.
    ////
    const Information: 3 = 3;

    /// Reports a hint.
    ////
    const Hint: 4 = 4;
}

type DiagnosticSeverity = 1 | 2 | 3 | 4;


/// The diagnostic tags.
///
@api(3.15)
////
namespace DiagnosticTag {

    /// Unused or unnecessary code.
    ///
    /// Clients are allowed to render diagnostics with this tag faded out
    /// instead of having an error squiggle.
    ////
    const Unnecessary: 1 = 1;

    /// Deprecated or obsolete code.
    ///
    /// Clients are allowed to rendered diagnostics with this tag strike through.
    ////
    const Deprecated: 2 = 2;
}

type DiagnosticTag = 1 | 2;

DiagnosticRelatedInformation is defined as follows:


/// Represents a related message and source code location for a diagnostic.
/// This should be used to point to code locations that cause or are related to
/// a diagnostics, e.g when duplicating a symbol in a scope.
////
interface DiagnosticRelatedInformation {

    /// The location of this related diagnostic information.
    ////
    location: Location;


    /// The message of this related diagnostic information.
    ////
    message: string;
}

CodeDescription is defined as follows:


/// Structure to capture a description for an error code.
///
@api(3.16)
////
interface CodeDescription {

    /// An URI to open with more information about the diagnostic error.
    ////
    href: URI;
}

Command

Represents a reference to a command. Provides a title which will be used to represent a command in the UI. Commands are identified by a string identifier. The recommended way to handle commands is to implement their execution on the server side if the client and server provides the corresponding capabilities. Alternatively the tool extension code could handle the command. The protocol currently doesn’t specify a set of well-known commands.

interface Command {

    /// Title of the command, like `save`.
    ////
    title: string;

    /// The identifier of the actual command handler.
    ////
    command: string;

    /// Arguments that the command handler should be
    /// invoked with.
    ////
    arguments?: LSPAny[];
}

MarkupContent

A MarkupContent literal represents a string value which content can be represented in different formats. Currently plaintext and markdown are supported formats. A MarkupContent is usually used in documentation properties of result literals like CompletionItem or SignatureInformation. If the format is markdown the content should follow the GitHub Flavored Markdown Specification.


/// Describes the content type that a client supports in various
/// result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
///
/// Please note that `MarkupKinds` must not start with a `$`. This kinds
/// are reserved for internal usage.
////
namespace MarkupKind {

    /// Plain text is supported as a content format
    ////
    const PlainText: 'plaintext' = 'plaintext';


    /// Markdown is supported as a content format
    ////
    const Markdown: 'markdown' = 'markdown';
}
type MarkupKind = 'plaintext' | 'markdown';


/// A `MarkupContent` literal represents a string value which content is
/// interpreted base on its kind flag. Currently the protocol supports
/// `plaintext` and `markdown` as markup kinds.
///
/// If the kind is `markdown` then the value can contain fenced code blocks like
/// in GitHub issues.
///
/// Here is an example how such a string can be constructed using
/// JavaScript / TypeScript:
/// ```typescript
/// let markdown: MarkdownContent = {
///     kind: MarkupKind.Markdown,
///     value: [
///         '# Header',
///         'Some text',
///         '```typescript',
///         'someCode();',
///         '```'
///     ].join('\n')
/// };
/// ```
///
/// *Please Note* that clients might sanitize the return markdown. A client could
/// decide to remove HTML from the markdown to avoid script execution.
////
interface MarkupContent {

    /// The type of the Markup
    ////
    kind: MarkupKind;


    /// The content itself
    ////
    value: string;
}

In addition clients should signal the markdown parser they are using via the client capability general.markdown introduced in version 3.16.0 defined as follows:


/// Client capabilities specific to the used markdown parser.
///
@api(3.16)
////
interface MarkdownClientCapabilities {

    /// The name of the parser.
    ////
    parser: string;


    /// The version of the parser.
    ////
    version?: string;


    /// A list of HTML tags that the client allows / supports in
    /// Markdown.
    ///
    @api(3.17)
    ////
    allowedTags?: string[];
}

Known markdown parsers used by clients right now are:
Parser     Version     Documentation
marked     1.1.0     Marked Documentation
Python-Markdown     3.2.2     Python-Markdown Documentation
File Resource changes

    New in version 3.13. Since version 3.16 file resource changes can carry an additional property changeAnnotation to describe the actual change in more detail. Whether a client has support for change annotations is guarded by the client capability workspace.workspaceEdit.changeAnnotationSupport.

File resource changes allow servers to create, rename and delete files and folders via the client. Note that the names talk about files but the operations are supposed to work on files and folders. This is in line with other naming in the Language Server Protocol (see file watchers which can watch files and folders). The corresponding change literals look as follows:


/// Options to create a file.
////
interface CreateFileOptions {

    /// Overwrite existing file. Overwrite wins over `ignoreIfExists`
    ////
    overwrite?: boolean;


    /// Ignore if exists.
    ////
    ignoreIfExists?: boolean;
}


/// Create file operation
////
interface CreateFile {

    /// A create
    ////
    kind: 'create';


    /// The resource to create.
    ////
    uri: DocumentUri;


    /// Additional options
    ////
    options?: CreateFileOptions;


    /// An optional annotation identifier describing the operation.
    ///
    @api(3.16)
    ////
    annotationId?: ChangeAnnotationIdentifier;
}


/// Rename file options
////
interface RenameFileOptions {

    /// Overwrite target if existing. Overwrite wins over `ignoreIfExists`
    ////
    overwrite?: boolean;


    /// Ignores if target exists.
    ////
    ignoreIfExists?: boolean;
}


/// Rename file operation
////
interface RenameFile {

    /// A rename
    ////
    kind: 'rename';


    /// The old (existing) location.
    ////
    oldUri: DocumentUri;


    /// The new location.
    ////
    newUri: DocumentUri;


    /// Rename options.
    ////
    options?: RenameFileOptions;


    /// An optional annotation identifier describing the operation.
    ///
    @api(3.16)
    ////
    annotationId?: ChangeAnnotationIdentifier;
}


/// Delete file options
////
interface DeleteFileOptions {

    /// Delete the content recursively if a folder is denoted.
    ////
    recursive?: boolean;


    /// Ignore the operation if the file doesn't exist.
    ////
    ignoreIfNotExists?: boolean;
}


/// Delete file operation
////
interface DeleteFile {

    /// A delete
    ////
    kind: 'delete';


    /// The file to delete.
    ////
    uri: DocumentUri;


    /// Delete options.
    ////
    options?: DeleteFileOptions;


    /// An optional annotation identifier describing the operation.
    ///
    @api(3.16)
    ////
    annotationId?: ChangeAnnotationIdentifier;
}

WorkspaceEdit

A workspace edit represents changes to many resources managed in the workspace. The edit should either provide changes or documentChanges. If the client can handle versioned document edits and if documentChanges are present, the latter are preferred over changes.

Since version 3.13.0 a workspace edit can contain resource operations (create, delete or rename files and folders) as well. If resource operations are present clients need to execute the operations in the order in which they are provided. So a workspace edit for example can consist of the following two changes: (1) create file a.txt and (2) a text document edit which insert text into file a.txt. An invalid sequence (e.g. (1) delete file a.txt and (2) insert text into file a.txt) will cause failure of the operation. How the client recovers from the failure is described by the client capability: workspace.workspaceEdit.failureHandling

interface WorkspaceEdit {

    /// Holds changes to existing resources.
    ////
    changes?: { [uri: DocumentUri]: TextEdit[]; };


    /// Depending on the client capability
    /// `workspace.workspaceEdit.resourceOperations` document changes are either
    /// an array of `TextDocumentEdit`s to express changes to n different text
    /// documents where each text document edit addresses a specific version of
    /// a text document. Or it can contain above `TextDocumentEdit`s mixed with
    /// create, rename and delete file / folder operations.
    ///
    /// Whether a client supports versioned document edits is expressed via
    /// `workspace.workspaceEdit.documentChanges` client capability.
    ///
    /// If a client neither supports `documentChanges` nor
    /// `workspace.workspaceEdit.resourceOperations` then only plain `TextEdit`s
    /// using the `changes` property are supported.
    ////
    documentChanges?: (
        TextDocumentEdit[] |
        (TextDocumentEdit | CreateFile | RenameFile | DeleteFile)[]
    );


    /// A map of change annotations that can be referenced in
    /// `AnnotatedTextEdit`s or create, rename and delete file / folder
    /// operations.
    ///
    /// Whether clients honor this property depends on the client capability
    /// `workspace.changeAnnotationSupport`.
    ///
    @api(3.16)
    ////
    changeAnnotations?: {
        [id: string /* ChangeAnnotationIdentifier////]: ChangeAnnotation;
    };
}

WorkspaceEditClientCapabilities

    New in version 3.13: ResourceOperationKind and FailureHandlingKind and the client capability workspace.workspaceEdit.resourceOperations as well as workspace.workspaceEdit.failureHandling.

The capabilities of a workspace edit has evolved over the time. Clients can describe their support using the following client capability:

Client Capability:

    property path (optional): workspace.workspaceEdit
    property type: WorkspaceEditClientCapabilities defined as follows:

interface WorkspaceEditClientCapabilities {

    /// The client supports versioned document changes in `WorkspaceEdit`s
    ////
    documentChanges?: boolean;


    /// The resource operations the client supports. Clients should at least
    /// support 'create', 'rename' and 'delete' files and folders.
    ///
    @api(3.13)
    ////
    resourceOperations?: ResourceOperationKind[];


    /// The failure handling strategy of a client if applying the workspace edit
    /// fails.
    ///
    @api(3.13)
    ////
    failureHandling?: FailureHandlingKind;


    /// Whether the client normalizes line endings to the client specific
    /// setting.
    /// If set to `true` the client will normalize line ending characters
    /// in a workspace edit to the client specific new line character(s).
    ///
    @api(3.16)
    ////
    normalizesLineEndings?: boolean;


    /// Whether the client in general supports change annotations on text edits,
    /// create file, rename file and delete file changes.
    ///
    @api(3.16)
    ////
    changeAnnotationSupport?: {

        /// Whether the client groups edits with equal labels into tree nodes,
        /// for instance all edits labelled with "Changes in Strings" would
        /// be a tree node.
        ////
        groupsOnLabel?: boolean;
    };
}


/// The kind of resource operations supported by the client.
////
type ResourceOperationKind = 'create' | 'rename' | 'delete';

namespace ResourceOperationKind {


    /// Supports creating new files and folders.
    ////
    const Create: ResourceOperationKind = 'create';


    /// Supports renaming existing files and folders.
    ////
    const Rename: ResourceOperationKind = 'rename';


    /// Supports deleting existing files and folders.
    ////
    const Delete: ResourceOperationKind = 'delete';
}

type FailureHandlingKind = 'abort' | 'transactional' | 'undo'
    | 'textOnlyTransactional';

namespace FailureHandlingKind {


    /// Applying the workspace change is simply aborted if one of the changes
    /// provided fails. All operations executed before the failing operation
    /// stay executed.
    ////
    const Abort: FailureHandlingKind = 'abort';


    /// All operations are executed transactional. That means they either all
    /// succeed or no changes at all are applied to the workspace.
    ////
    const Transactional: FailureHandlingKind = 'transactional';



    /// If the workspace edit contains only textual file changes they are
    /// executed transactional. If resource changes (create, rename or delete
    /// file) are part of the change the failure handling strategy is abort.
    ////
    const TextOnlyTransactional: FailureHandlingKind
        = 'textOnlyTransactional';


    /// The client tries to undo the operations already executed. But there is no
    /// guarantee that this is succeeding.
    ////
    const Undo: FailureHandlingKind = 'undo';
}

Work Done Progress

    Since version 3.15.0

Work done progress is reported using the generic $/progress notification. The value payload of a work done progress notification can be of three different forms.
Work Done Progress Begin

To start progress reporting a $/progress notification with the following payload must be sent:

interface WorkDoneProgressBegin {

    kind: 'begin';


    /// Mandatory title of the progress operation. Used to briefly inform about
    /// the kind of operation being performed.
    ///
    /// Examples: "Indexing" or "Linking dependencies".
    ////
    title: string;


    /// Controls if a cancel button should show to allow the user to cancel the
    /// long running operation. Clients that don't support cancellation are
    /// allowed to ignore the setting.
    ////
    cancellable?: boolean;


    /// Optional, more detailed associated progress message. Contains
    /// complementary information to the `title`.
    ///
    /// Examples: "3/25 files", "project/src/module2", "node_modules/some_dep".
    /// If unset, the previous progress message (if any) is still valid.
    ////
    message?: string;


    /// Optional progress percentage to display (value 100 is considered 100%).
    /// If not provided infinite progress is assumed and clients are allowed
    /// to ignore the `percentage` value in subsequent in report notifications.
    ///
    /// The value should be steadily rising. Clients are free to ignore values
    /// that are not following this rule. The value range is [0, 100]
    ////
    percentage?: uinteger;
}

Work Done Progress Report

Reporting progress is done using the following payload:

interface WorkDoneProgressReport {

    kind: 'report';


    /// Controls enablement state of a cancel button. This property is only valid
    /// if a cancel button got requested in the `WorkDoneProgressBegin` payload.
    ///
    /// Clients that don't support cancellation or don't support control the
    /// button's enablement state are allowed to ignore the setting.
    ////
    cancellable?: boolean;


    /// Optional, more detailed associated progress message. Contains
    /// complementary information to the `title`.
    ///
    /// Examples: "3/25 files", "project/src/module2", "node_modules/some_dep".
    /// If unset, the previous progress message (if any) is still valid.
    ////
    message?: string;


    /// Optional progress percentage to display (value 100 is considered 100%).
    /// If not provided infinite progress is assumed and clients are allowed
    /// to ignore the `percentage` value in subsequent in report notifications.
    ///
    /// The value should be steadily rising. Clients are free to ignore values
    /// that are not following this rule. The value range is [0, 100]
    ////
    percentage?: uinteger;
}

Work Done Progress End

Signaling the end of a progress reporting is done using the following payload:

interface WorkDoneProgressEnd {

    kind: 'end';


    /// Optional, a final message indicating to for example indicate the outcome
    /// of the operation.
    ////
    message?: string;
}

Initiating Work Done Progress

Work Done progress can be initiated in two different ways:

    by the sender of a request (mostly clients) using the predefined workDoneToken property in the requests parameter literal. The document will refer to this kind of progress as client initiated progress.
    by a server using the request window/workDoneProgress/create. The document will refer to this kind of progress as server initiated progress.

Client Initiated Progress

Consider a client sending a textDocument/reference request to a server and the client accepts work done progress reporting on that request. To signal this to the server the client would add a workDoneToken property to the reference request parameters. Something like this:

{
    "textDocument": {
        "uri": "file:///folder/file.ts"
    },
    "position": {
        "line": 9,
        "character": 5
    },
    "context": {
        "includeDeclaration": true
    },
    // The token used to report work done progress.
    "workDoneToken": "1d546990-40a3-4b77-b134-46622995f6ae"
}

The corresponding type definition for the parameter property looks like this:

interface WorkDoneProgressParams {

    /// An optional token that a server can use to report work done progress.
    ////
    workDoneToken?: ProgressToken;
}

A server uses the workDoneToken to report progress for the specific textDocument/reference. For the above request the $/progress notification params look like this:

{
    "token": "1d546990-40a3-4b77-b134-46622995f6ae",
    "value": {
        "kind": "begin",
        "title": "Finding references for A#foo",
        "cancellable": false,
        "message": "Processing file X.ts",
        "percentage": 0
    }
}

The token received via the workDoneToken property in a request’s param literal is only valid as long as the request has not send a response back.

There is no specific client capability signaling whether a client will send a progress token per request. The reason for this is that this is in many clients not a static aspect and might even change for every request instance for the same request type. So the capability is signal on every request instance by the presence of a workDoneToken property.

To avoid that clients set up a progress monitor user interface before sending a request but the server doesn’t actually report any progress a server needs to signal general work done progress reporting support in the corresponding server capability. For the above find references example a server would signal such a support by setting the referencesProvider property in the server capabilities as follows:

{
    "referencesProvider": {
        "workDoneProgress": true
    }
}

The corresponding type definition for the server capability looks like this:

interface WorkDoneProgressOptions {
    workDoneProgress?: boolean;
}

Server Initiated Progress

Servers can also initiate progress reporting using the window/workDoneProgress/create request. This is useful if the server needs to report progress outside of a request (for example the server needs to re-index a database). The token can then be used to report progress using the same notifications used as for client initiated progress. The token provided in the create request should only be used once (e.g. only one begin, many report and one end notification should be sent to it).

To keep the protocol backwards compatible servers are only allowed to use window/workDoneProgress/create request if the client signals corresponding support using the client capability window.workDoneProgress which is defined as follows:


    /// Window specific client capabilities.
    ////
    window?: {

        /// Whether client supports server initiated progress using the
        /// `window/workDoneProgress/create` request.
        ////
        workDoneProgress?: boolean;
    };

Partial Result Progress

    Since version 3.15.0

Partial results are also reported using the generic $/progress notification. The value payload of a partial result progress notification is in most cases the same as the final result. For example the workspace/symbol request has SymbolInformation[] | WorkspaceSymbol[] as the result type. Partial result is therefore also of type SymbolInformation[] | WorkspaceSymbol[]. Whether a client accepts partial result notifications for a request is signaled by adding a partialResultToken to the request parameter. For example, a textDocument/reference request that supports both work done and partial result progress might look like this:

{
    "textDocument": {
        "uri": "file:///folder/file.ts"
    },
    "position": {
        "line": 9,
        "character": 5
    },
    "context": {
        "includeDeclaration": true
    },
    // The token used to report work done progress.
    "workDoneToken": "1d546990-40a3-4b77-b134-46622995f6ae",
    // The token used to report partial result progress.
    "partialResultToken": "5f6f349e-4f81-4a3b-afff-ee04bff96804"
}

The partialResultToken is then used to report partial results for the find references request.

If a server reports partial result via a corresponding $/progress, the whole result must be reported using n $/progress notifications. The final response has to be empty in terms of result values. This avoids confusion about how the final result should be interpreted, e.g. as another partial result or as a replacing result.

If the response errors the provided partial results should be treated as follows:

    the code equals to RequestCancelled: the client is free to use the provided results but should make clear that the request got canceled and may be incomplete.
    in all other cases the provided partial results shouldn’t be used.

PartialResultParams

A parameter literal used to pass a partial result token.

interface PartialResultParams {

    /// An optional token that a server can use to report partial results (e.g.
    /// streaming) to the client.
    ////
    partialResultToken?: ProgressToken;
}

TraceValue

A TraceValue represents the level of verbosity with which the server systematically reports its execution trace using $/logTrace notifications. The initial trace value is set by the client at initialization and can be modified later using the $/setTrace notification.

type TraceValue = 'off' | 'messages' | 'verbose';
