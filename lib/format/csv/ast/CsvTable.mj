

class CsvTable {
    List<String> header;
    Table<String> data;


    CsvTable() {}



    u32 size(safe) {
        return header.size();
    }


    u32 columns_size(safe) {
        return header.size();
    }


    const List<String> &'header(safe) {
        return header;
    }


    const Table<String> &'data(safe) {
        return data;
    }





    void insert_column(u32 index, String value) {
        data.insert(index, column);
    }


    /// Append a column to a CSV table. Adding and removing columns in CSV data
    /// is more expensive than adding and removing records. If possible, do not
    /// change the columns when the table contains many records.
    void append_column() {
        ;
    }


    void move_column(u32 index, u32 dest, u32 n) {
        data.move(index, dest, n);
    }





    void insert_record(u32 index) {
        ;
    }


    /// Append a record (move)
    void append_record(CsvRecord record) {
        ;
    }


    /// Append a record (move)
    void append_record(CsvRecord record) {
        ;
    }


    /// Append a record (copy)
    void append_record(const CsvRecord &record) {
        ;
    }


    /// Append a record 
    void append_record(List<CsvRecord> records) {
        ;
    }





    void print(CsvConfig &config, OutpoutStream &stream) {
        if (config.print_header()) {
            header.print(stream);
        }

        for (CsvRecord &record in records) {
            record.print(stream);
        }
    }


    @shared
    CsvTable parse(CsvConfig &config, InputStream &stream) {
        CsvTable csv;
        return csv;
    }
}
