

/// 
class SystemEventLog {

}


struct SelRecordFormat {

    /// Record ID
    ///
    /// ID used for SEL Record access. The Record ID values `0x0000` and
    /// `0xFFFF` have special meaning in the Event Access commands and must not
    /// be used as Record ID values for stored SEL Event Records.
    u16 record_id;

    /// Record Type
    ///
    /// `0x02` - system event record
    /// `0xC0:0xDF` - OEM timestamped, bytes 8-16 OEM defined
    /// `0xE0:0xFF` - OEM non-timestamped, bytes 4-16 OEM defined
    u8 record_type;

    /// Time when event was logged. LS byte first.
    u32 timestamp;

    /// RqSA & LUN if event was generated from IPMB. Software ID if event was generated from system software.
    bitfield<u8[2]> generator_id {

        /// 7-bit I2C. Slave Address, or 7-bit system software ID
        [0][7:1] i2c_target_address;

        /// `0` - ID is IPMB Slave Address
        /// `1` - system software ID
        [0][0] id_type;

        /// Channel number.
        ///
        /// Channel that event message was received over. `0` if the
        /// event message was received via the system interface, primary IPMB, or
        /// internally generated by the BMC.
        ///
        /// New for IPMI v1.5. These bits were reserved in IPMI v1.0
        @api(1.5)
        [1][7:4] channel_number;

        /// reserved. Write as 0.
        /// [1][3:2] reserved;

        /// IPMB device LUN if byte 1 holds Slave Address. 00b otherwise.
        [1][1:0] device_lun;
    }

    /// 
    u8 evm_rev;

    /// Sensor Type Code for sensor that generated the event
    u8 sensor_type;

    /// Number of sensor that generated the event
    u8 sensor_number;

    bitfield<u8> {

        /// Event Dir
        ///
        /// `0` - Assertion event.
        /// `1` - Deassertion event.
        [7] event_dir;

        /// Event Type
        ///
        /// Type of trigger for the event, e.g. critical threshold going high,
        /// state asserted, etc. Also indicates class of the event. E.g.
        /// discrete, threshold, or OEM. The Event Type field is encoded using
        /// the Event/Reading Type Code.
        ///
        /// See IPMI 42.1 - Event/Reading Type Codes
        [6:0] event_type;
    }
}
