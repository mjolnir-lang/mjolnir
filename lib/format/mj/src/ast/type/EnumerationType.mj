#pragma once

#include "mj/ast/types/MjBasicType.hpp"


class MjEnumerationType : public MjBasicType {
private:

    Vector<MjMember *> members_;
    const MjToken *name_; // The type identifier sequence (TODO)
    const MjComment *comment_; // The type documentation comment

    const MjBasicType &index_type_;
    const Vector<MjVariable> values_;
public:


    MjEnumerationType(
        u32 size,
        u32 alignment,
        bool is_const,
        bool is_volatile,
        const MjToken &name,
        Vector<MjType *> template_parameters,
        const MjComment *comment,
        MjBasicType &index_type
    ) :
        index_type_(index_type)
    {}


    ~MjEnumerationType() {}


    /// \brief Return the size of the type in bytes.
    u32 size() const {
        return index_type_.size();
    }


    /// \brief Return the alignment of the type in bytes.
    u32 alignment() const {
        return index_type_.alignment();
    }


    /// \brief Return true if the type is 'const' qualified.
    bool is_const() const {
        return true;
    }


    /// \brief Return true if the type is 'volatile' qualified.
    bool is_volatile() const {
        return false;
    }


    const Vector<MjProperty *> &properties() {
        return PROPERTIES;
    }


    const Vector<MjMethod *> &constructors() const {
        return CONSTRUCTORS;
    }


    const MjMethod &destructor() const {
        return DESTRUCTOR;
    }


    /// \brief Return the list of methods defined by the type.
    const Vector<MjMethod *> &methods() const {
        return METHODS;
    }


    const Vector<MjMember *> &members() const {
        return members_;
    }


    /// \brief Return the list of operators defined by the type.
    const Vector<MjOperator *> &operators() const {
        return OPERATORS;
    }


    /// \brief Return the 'const' qualified derivation of the type.
    const MjType &const_qualified_derivation() const {
        return;
    }


    /// \brief Return the 'volatile' qualified derivation of the type.
    const MjType &volatile_qualified_derivation() const {
        return;
    }

    bool is_anonymous() {
        return name_ == nullptr;
    }


    bool is_generic() {
        return !template_parameters_.is_empty();
    }


    const MjBasicType &index_type() const {
        return index_type_;
    }


    const Vector<MjVariable> values() const {
        return values_;
    }
};
