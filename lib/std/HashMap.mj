

/// If you intend to mutate an object such that its hash will be changed,
/// it must first be manually removed and then re-added.
class HashMap<type K, type V> {
    K *keys
    V *values
    u32 size


    HashMap()


    u32 size(safe) {
        return size
    }


    bool is_empty(safe) {
        return size == 0
    }


    bool contains(safe; const K &key) {
        return key in keys
    }


    V &'? insert(const K &key, V value)


    V &'? insert(const K &key, ...) {
        data[key] = V(...)
    }


    /// Insert all objects from the other map.
    void? insert(Map<K, V> other)


    /// Insert all objects from the other map.
    void? insert(HashMap<K, V> other)


    /// Remove the object with the given key.
    void? remove(const K &key)


    /// Remove all objects with the given keys.
    void? remove(const Iterable<K> &keys)


    /// Return the object associated with the given key.
    const V &'? get(const K &key)


    u32 count()
    Iterator<const V &'> find(const Iterable<K> &keys)


    /// Return the object associated with the given key.
    V &'? {[]}(const K &key)


    ///
    void? {+=}(Map<K, V> other) {
        insert(other)
    }
}


impl<Iterable<const V &>> HashMap<K, V> {


    HashMapIterator<const V &> iterator(safe) {
        return HashMapIterator<const V &>(data)
    }
}
