

/// An ordered set of unique keys.
/// - `T` The key type
@api(1.0)
class Set<type T> {
    SetNode *root


    Set() {}


    Set(const Iterable<T> &values) {
        for (T &v in values) {
            insert(v)
        }
    }


    Set(const Set<T> &values) {
        for (T &v in values) {
            insert(v)
        }
    }


    Set(Set<T> values) {
        for (T v in values) {
            insert(v)
        }
    }


    Set(const Set<T> &values) {
        for (T &v in values) {
            insert(v)
        }
    }








    Set(Set<T> values) {
        for (T v in values) {
            insert(v)
        }
    }


    Set(const Slice<T> &values) {
        for (T &v in values) {
            insert(v)
        }
    }


    Set(Slice<T> values) {
        for (T v in values) {
            insert(v)
        }
    }


    bool is_empty(safe) {
        return root != null
    }


    u32 size(safe) {
        return data.size()
    }


    void clear() {
        keys.clear()
        data.clear()
    }


    void reserve(u32 size) {
        data.reserve(size)
    }


    void insert(const T &key) {
        
    }


    void insert(const T &key) {
        
    }


    V &insert_new(...) {
        return V(...)
    }


    void remove(const T &key) {
        
    }


    bool contains(safe; const T &key) {
        
    }


    Set<T> &{=}(const Set<T> &values) {
        return Set<T>(values)
    }


    Set<T> &{=}(Set<T> &&values) {
        return Set<T>(values)
    }



    Set<T> ::union(safe; const Set<T> &other) {
        Set<T> set = Set<T>(this)

        for (T &t in other) {
            if (t not in this) {
                set.add(t)
            }
        }

        return set
    }


    Set<T> intersection(safe; const Set<T> &other) {
        Set<T> set = Set<T>()

        for (T &t in other) {
            if (t !in this) {
                set.add(t)
            }
        }

        return set
    }





    /// @param T red–black tree
    /// @param P root of subtree (may be the root of T)
    /// @param dir dir ∈ { LEFT, RIGHT }
    @private
    SetNode *rotate_dir_root(SetNode *p, u8 dir) {
        SetNode *g = p->parent
        SetNode *s = p->child[1 - dir]
        SetNode *c

        assert(s != nullptr); // pointer to true node required

        c = s->child[dir]
        p->child[1 - dir] = c

        if (c != nullptr) {
            c->parent = p
        }

        s->child[dir] = p
        p->parent = s
        s->parent = g

        if (g != nullptr) {
            g->child[p == g->child[RIGHT] ? RIGHT : LEFT] = s
        } else {
            root_ = s
        }

        return s; // new root of subtree
    }


    @private
    SetNode *rotate_dir(SetNode *n, u8 dir) {
        return rotate_dir_root(n, dir)
    }


    @private
    SetNode *rotate_left(SetNode *n)    {
        return rotate_dir_root(n, LEFT)
    }


    @private
    SetNode *rotate_right(SetNode *n)   {
        return rotate_dir_root(n, RIGHT)
    }


    /// @param N node to be inserted
    /// @param P parent node of N ( may be NULL )
    /// @param dir side ( LEFT or RIGHT ) of P where to insert N
    @private
    void insert1(SetNode *n, SetNode *p, u8 dir) {
        SetNode *g; // -> parent node of P
        SetNode *u; // -> uncle of N
        n->color = Color::RED
        n->left = nullptr
        n->right = nullptr
        n->parent = p

        if (p == nullptr) {
            // There is no parent
            root_ = n; // N is the new root of the tree T.
            return
        }

        p->child[dir] = n; // insert N as dir-child of P

        do {
            if (p->color == Color::BLACK) {
                // Case I1: P is black.
                return
            }

            // From now on P is red.
            g = p->parent

            if (g == nullptr) {
                // Case I4: P is the root and red
                p->color = Color::BLACK
                return
            }

            // P is red and G exists.
            dir = childDir(p); // the side of parent G on which node P is located
            u = g->child[1 - dir]; // uncle

            if (u == nullptr || u->color == Color::BLACK) {
                // considered black
                // P red && U black
                if (n == p->child[1 - dir]) {
                    // Case I5: P is red, U is black, and N is the inner grandchild of G.
                    rotate_dir(p, dir); // P is never the root
                    n = p; // new current node
                    p = g->child[dir]; // new parent of N
                }

                // Case I6: P is red, U is black, and N is the outer grandchild of G.
                rotate_dir_root(g, 1 - dir); // G may be the root
                p->color = Color::BLACK
                g->color = Color::RED
                return
            }

            // Case_I2: P and U are red.
            p->color = Color::BLACK
            u->color = Color::BLACK
            g->color = Color::RED
            n = g; // new current node
            // iterate 1 black level higher
            //   (= 2 tree levels)
            p = n->parent
        } while (p != nullptr)

        // Case_I3: N is the root and red.
    }



    /// @param n node to be deleted
    @private
    void delete2(SetNode *n) {
        SetNode *p = n->parent;  // -> parent node of N
        SetNode *s;  // -> sibling of N
        SetNode *c;  // -> close   nephew
        SetNode *d;  // -> distant nephew
        u8 dir;          // side of P on which N is located (∈ { LEFT, RIGHT })

        // P != NULL, since N is not the root.
        dir = childDir(n); // side of parent P on which the node N is located
        // Replace N at its parent P by NIL:
        p->child[dir] = nullptr
        goto Start_D; // jump into the loop

        do {
            dir = childDir(n);   // side of parent P on which node N is located
Start_D:
            s = p->child[1 - dir]; // sibling of N (has black height >= 1)
            d = s->child[1 - dir]; // distant nephew
            c = s->child[dir]; // close   nephew

            if (s->color == Color::RED) {
                goto Case_D3; // S red ===> P+C+D black
            }

            // S is black:
            if (d != nullptr && d->color == Color::RED) {
                // not considered black
                goto Case_D6; // D red && S black
            }

            if (c != nullptr && c->color == Color::RED) {
                // not considered black
                goto Case_D5; // C red && S+D black
            }

            // Here both nephews are == NIL (first iteration) or black (later).
            if (p->color == Color::RED) {
                // Case D4: P red && S+C+D black:
                s->color = Color::RED
                p->color = Color::BLACK
                return
            }

            // Case D1: P does not exist.
            return

            // Case_D2 (P+C+S+D black):
            s->color = Color::RED
            n = p; // new current node (maybe the root)
            // iterate 1 black level
            //   (= 1 tree level) higher
            p = n->parent
        } while (p != nullptr)

Case_D3: // S red && P+C+D black:
        rotate_dir_root(p, dir); // P may be the root
        p->color = Color::RED
        s->color = Color::BLACK
        s = c; // != NIL
        // now: P red && S black
        d = s->child[1 - dir]; // distant nephew

        if (d != nullptr && d->color == Color::RED) {
            goto Case_D6; // D red && S black
        }

        c = s->child[dir]; // close   nephew

        if (c != nullptr && c->color == Color::RED) {
            goto Case_D5; // C red && S+D black
        }

        // Otherwise C+D considered black.
Case_D5: // C red && S+D black:
        rotate_dir(s, 1 - dir); // S is never the root
        s->color = Color::RED
        c->color = Color::BLACK
        d = s
        s = c
        // now: D red && S black
Case_D6: // D red && S black:
        rotate_dir_root(p, dir); // P may be the root
        s->color = p->color
        p->color = Color::BLACK
        d->color = Color::BLACK
    }
}


// Basic type definitions:

@private
enum<u8> Direction {
    LEFT  = 0
    RIGHT = 1
}


@private
enum<u8> Color {
    BLACK = 0
    RED   = 1
}


@private
struct SetNode {     // node of red–black tree
    SetNode *parent;   // == NIL if root of the tree
    SetNode *child[2]; // == NIL if child is empty
    // The index is:
    //   LEFT  := 0, if (key < parent->key)
    //   RIGHT := 1, if (key > parent->key)
    Color color
    u8 key
}
