

/// Server lifecycle
///
/// The current protocol specification defines that the lifecycle of a server is
/// managed by the client (e.g. a tool like VS Code or Emacs). It is up to the
/// client to decide when to start (process-wise) and when to shutdown a server.


/// Initialize Request
///
/// The initialize request is sent as the first request from the client to the server.
/// If the server receives a request or notification before the initialize request it
/// should act as follows:
///
/// - For a request the response should be an error with code: -32002. The message can be picked by the server.
/// - Notifications should be dropped, except for the exit notification. This will allow the exit of a server without an initialize request.
///
/// Until the server has responded to the initialize request with an InitializeResult,
/// the client must not send any additional requests or notifications to the server.
/// In addition the server is not allowed to send any requests or notifications to the
/// client until it has responded with an InitializeResult, with the exception that
/// during the initialize request the server is allowed to send the notifications
/// window/showMessage, window/logMessage and telemetry/event as well as the
/// window/showMessageRequest request to the client. In case the client sets up a
/// progress token in the initialize params (e.g. property workDoneToken) the server
/// is also allowed to use that token (and only that token) using the $/progress
/// notification sent from the server to the client.
///
/// The initialize request may only be sent once.
///
/// Request:
///
/// - method: 'initialize'
/// - params: InitializeParams defined as follows:
struct LspInitializeParams {
    implements LspWorkDoneProgressParams

    /// The process Id of the parent process that started the server. Is null if
    /// the process has not been started by another process. If the parent
    /// process is not alive then the server should exit (see exit notification)
    /// its process.
    (i32 | null) process_id;

    /// Information about the client
    @api(3.15)
    {

        /// The name of the client as defined by the client.
        String name;

        /// The client's version as defined by the client.
        String version;
     } client_info;

    /// The locale the client is currently showing the user interface
    /// in. This must not necessarily be the locale of the operating
    /// system.
    ///
    /// Uses IETF language tags as the value's syntax
    /// (See https://en.wikipedia.org/wiki/IETF_language_tag)
    @api(3.16)
    String locale;

    /// The rootPath of the workspace. Is null
    /// if no folder is open.
    @deprecated() in favour of `root_uri`.
    (String | null) root_path;

    /// The rootUri of the workspace. Is null if no
    /// folder is open. If both `rootPath` and `rootUri` are set
    /// `rootUri` wins.
    @deprecated() in favour of `workspace_folders`
    (LspDocumentUri | null) root_uri;

    /// User provided initialization options.
    LspAny initialization_options;

    /// The capabilities provided by the client (editor or tool)
    LspClientCapabilities capabilities;

    /// The initial trace setting. If omitted trace is disabled ('off').
    LspTraceValue trace;

    /// The workspace folders configured in the client when the server starts.
    /// This property is only available if the client supports workspace folders.
    /// It can be `null` if the client supports workspace folders but none are
    /// configured.
    @api(3.6)
    (LspWorkspaceFolder[] | null) workspace_folders;
}


/// Where ClientCapabilities and TextDocumentClientCapabilities are defined as follows:

/// TextDocumentClientCapabilities define capabilities the editor / tool provides on text documents.

/// Text document specific client capabilities.
struct LspTextDocumentClientCapabilities {

    LspTextDocumentSyncClientCapabilities synchronization;

    /// Capabilities specific to the `textDocument/completion` request.
    LspCompletionClientCapabilities completion;

    /// Capabilities specific to the `textDocument/hover` request.
    LspHoverClientCapabilities hover;

    /// Capabilities specific to the `textDocument/signatureHelp` request.
    LspSignatureHelpClientCapabilities signature_help;

    /// Capabilities specific to the `textDocument/declaration` request.
    @api(3.14)
    LspDeclarationClientCapabilities declaration;

    /// Capabilities specific to the `textDocument/definition` request.
    LspDefinitionClientCapabilities definition;

    /// Capabilities specific to the `textDocument/typeDefinition` request.
    @api(3.6)
    LspTypeDefinitionClientCapabilities type_definition;

    /// Capabilities specific to the `textDocument/implementation` request.
    @api(3.6)
    LspImplementationClientCapabilities implementation;

    /// Capabilities specific to the `textDocument/references` request.
    LspReferenceClientCapabilities references;

    /// Capabilities specific to the `textDocument/documentHighlight` request.
    LspDocumentHighlightClientCapabilities document_highlight;

    /// Capabilities specific to the `textDocument/documentSymbol` request.
    LspDocumentSymbolClientCapabilities document_symbol;

    /// Capabilities specific to the `textDocument/codeAction` request.
    LspCodeActionClientCapabilities code_action;

    /// Capabilities specific to the `textDocument/codeLens` request.
    LspCodeLensClientCapabilities code_lens;

    /// Capabilities specific to the `textDocument/documentLink` request.
    LspDocumentLinkClientCapabilities document_link;

    /// Capabilities specific to the `textDocument/documentColor` and the `textDocument/colorPresentation` request.
    @api(3.6)
    LspDocumentColorClientCapabilities color_provider;

    /// Capabilities specific to the `textDocument/formatting` request.
    LspDocumentFormattingClientCapabilities formatting;

    /// Capabilities specific to the `textDocument/rangeFormatting` request.
    LspDocumentRangeFormattingClientCapabilities range_formatting;

    /// Capabilities specific to the `textDocument/onTypeFormatting` request.
    LspDocumentOnTypeFormattingClientCapabilities on_type_formatting;

    /// Capabilities specific to the `textDocument/rename` request.
    LspRenameClientCapabilities rename;

    /// Capabilities specific to the `textDocument/publishDiagnostics` notification.
    LspPublishDiagnosticsClientCapabilities publish_diagnostics;

    /// Capabilities specific to the `textDocument/foldingRange` request.
    @api(3.10)
    LspFoldingRangeClientCapabilities folding_range;

    /// Capabilities specific to the `textDocument/selectionRange` request.
    @api(3.15)
    LspSelectionRangeClientCapabilities selection_range;

    /// Capabilities specific to the `textDocument/linkedEditingRange` request.
    @api(3.16)
    LspLinkedEditingRangeClientCapabilities linked_editing_range;

    /// Capabilities specific to the various call hierarchy requests.
    @api(3.16)
    LspCallHierarchyClientCapabilities call_hierarchy;

    /// Capabilities specific to the various semantic token requests.
    @api(3.16)
    LspSemanticTokensClientCapabilities semantic_tokens;

    /// Capabilities specific to the `textDocument/moniker` request.
    @api(3.16)
    LspMonikerClientCapabilities moniker;

    /// Capabilities specific to the various type hierarchy requests.
    @api(3.17)
    LspTypeHierarchyClientCapabilities type_hierarchy;

    /// Capabilities specific to the `textDocument/inlineValue` request.
    @api(3.17)
    LspInlineValueClientCapabilities inline_value;

    /// Capabilities specific to the `textDocument/inlayHint` request.
    @api(3.17)
    LspInlayHintClientCapabilities inlay_hint;

    /// Capabilities specific to the diagnostic pull model.
    @api(3.17)
    LspDiagnosticClientCapabilities diagnostic;
}


/// NotebookDocumentClientCapabilities

/// NotebookDocumentClientCapabilities define capabilities the editor / tool provides on notebook documents.


/// Capabilities specific to the notebook document support.
@api(3.17)
struct LspNotebookDocumentClientCapabilities {

    /// Capabilities specific to notebook document synchronization
    @api(3.17)
    LspNotebookDocumentSyncClientCapabilities synchronization;
}

/// ClientCapabilities define capabilities for dynamic registration, workspace and text document features the client supports. The experimental can be used to pass experimental capabilities under development. For future compatibility a ClientCapabilities object literal can have more properties set than currently defined. Servers receiving a ClientCapabilities object literal with unknown properties should ignore these properties. A missing property should be interpreted as an absence of the capability. If a missing property normally defines sub properties, all missing sub properties should be interpreted as an absence of the corresponding capability.

/// Client capabilities got introduced with version 3.0 of the protocol. They therefore only describe capabilities that got introduced in 3.x or later. Capabilities that existed in the 2.x version of the protocol are still mandatory for clients. Clients cannot opt out of providing them. So even if a client omits the ClientCapabilities.textDocument.synchronization it is still required that the client provides text document synchronization (e.g. open, changed and close notifications).

@api(3.0)
struct LspClientCapabilities {

    /// Workspace specific client capabilities.
    struct {

        /// The client supports applying batch edits
        /// to the workspace by supporting the request
        /// 'workspace/applyEdit'
        bool apply_edit;

        /// Capabilities specific to `WorkspaceEdit`s
        LspWorkspaceEditClientCapabilities workspace_edit;

        /// Capabilities specific to the `workspace/didChangeConfiguration`
        /// notification.
        LspDidChangeConfigurationClientCapabilities did_change_configuration;

        /// Capabilities specific to the `workspace/didChangeWatchedFiles`
        /// notification.
        LspDidChangeWatchedFilesClientCapabilities did_change_watched_files;

        /// Capabilities specific to the `workspace/symbol` request.
        LspWorkspaceSymbolClientCapabilities symbol;

        /// Capabilities specific to the `workspace/executeCommand` request.
        LspExecuteCommandClientCapabilities execute_command;

        /// The client has support for workspace folders.
        @api(3.6)
        bool workspace_folders;

        /// The client supports `workspace/configuration` requests.
        @api(3.6)
        bool configuration;

        /// Capabilities specific to the semantic token requests scoped to the
        /// workspace.
        @api(3.16)
        LspSemanticTokensWorkspaceClientCapabilities semantic_tokens;

        /// Capabilities specific to the code lens requests scoped to the
        /// workspace.
        @api(3.16)
        LspCodeLensWorkspaceClientCapabilities code_lens;

        /// The client has support for file requests/notifications.
        @api(3.16)
        struct {

            /// Whether the client supports dynamic registration for file
            /// requests/notifications.
            bool dynamic_registration;

            /// The client has support for sending didCreateFiles notifications.
            bool did_create;

            /// The client has support for sending willCreateFiles requests.
            bool will_create;

            /// The client has support for sending didRenameFiles notifications.
            bool did_rename;

            /// The client has support for sending willRenameFiles requests.
            bool will_rename;

            /// The client has support for sending didDeleteFiles notifications.
            bool did_delete;

            /// The client has support for sending willDeleteFiles requests.
            bool will_delete;
        } file_operations;

        /// Client workspace capabilities specific to inline values.
        @api(3.17)
        LspInlineValueWorkspaceClientCapabilities inline_value;

        /// Client workspace capabilities specific to inlay hints.
        @api(3.17)
        LspInlayHintWorkspaceClientCapabilities inlay_hint;

        /// Client workspace capabilities specific to diagnostics.
        @api(3.17).
        LspDiagnosticWorkspaceClientCapabilities diagnostics;
    } workspace;


    /// Text document specific client capabilities.
    LspTextDocumentClientCapabilities text_document;


    /// Capabilities specific to the notebook document support.
    @api(3.17)
    LspNotebookDocumentClientCapabilities notebook_document;

    /// Window specific client capabilities.
    struct {

        /// It indicates whether the client supports server initiated
        /// progress using the `window/workDoneProgress/create` request.
        ///
        /// The capability also controls Whether client supports handling
        /// of progress notifications. If set servers are allowed to report a
        /// `workDoneProgress` property in the request specific server
        /// capabilities.
        @api(3.15)
        bool work_done_progress;

        /// Capabilities specific to the showMessage request
        @api(3.16)
        LspShowMessageRequestClientCapabilities show_message;

        /// Client capabilities for the show document request.
        @api(3.16)
        LspShowDocumentClientCapabilities show_document;
    } window;

    /// General client capabilities.
    @api(3.16)
    struct {

        /// Client capability that signals how the client
        /// handles stale requests (e.g. a request
        /// for which the client will not process the response
        /// anymore since the information is outdated).
        @api(3.17)
        struct {

            /// The client will actively cancel the request.
            bool cancel;

            /// The list of requests for which the client
            /// will retry the request if it receives a
            /// response with error code `ContentModified`
            String[] retry_on_content_modified;
        } stale_request_support;

        /// Client capabilities specific to regular expressions.
        @api(3.16)
        LspRegularExpressionsClientCapabilities regular_expressions;

        /// Client capabilities specific to the client's markdown parser.
        @api(3.16)
        LspMarkdownClientCapabilities markdown;

        /// The position encodings supported by the client. Client and server
        /// have to agree on the same position encoding to ensure that offsets
        /// (e.g. character position in a line) are interpreted the same on both
        /// side.
        ///
        /// To keep the protocol backwards compatible the following applies: if
        /// the value 'utf-16' is missing from the array of position encodings
        /// servers can assume that the client supports UTF-16. UTF-16 is
        /// therefore a mandatory encoding.
        ///
        /// If omitted it defaults to ['utf-16'].
        ///
        /// Implementation considerations: since the conversion from one encoding
        /// into another requires the content of the file / line the conversion
        /// is best done where the file is read which is usually on the server
        /// side.
        @api(3.17)
        LspPositionEncodingKind[] position_encodings;
    } general;

    /// Experimental client capabilities.
    LspAny experimental;
}

Response:

    result: InitializeResult defined as follows:

struct LspInitializeResult {

    /// The capabilities the language server provides.
    LspServerCapabilities capabilities;

    /// Information about the server.
    @api(3.15)
    struct {

        /// The name of the server as defined by the server.
        String name;

        /// The server's version as defined by the server.
        String version;
    } server_info;
}

    error.code:

/// Known error codes for an `LspInitializeErrorCodes`;
enum<u8> LspInitializeErrorCodes {


    /// If the protocol version provided by the client can't be handled by
    /// the server.
    ///
    /// @deprecated This initialize error got replaced by client capabilities.
    /// There is no version handshake in version 3.0x
    UNKNOWN_PROTOCOL_VERSION = 1;
}

    error.data:

struct LspInitializeError {

    /// Indicates whether the client execute the following retry logic:
    /// (1) show the message provided by the ResponseError to the user
    /// (2) user selects retry or cancel
    /// (3) if user selected retry the initialize method is sent again.
    ////
    bool retry;
}

The server can signal the following capabilities:

struct LspServerCapabilities {

    /// The position encoding the server picked from the encodings offered
    /// by the client via the client capability `general.positionEncodings`.
    ///
    /// If the client didn't provide any position encodings the only valid
    /// value that a server can return is 'utf-16'.
    ///
    /// If omitted it defaults to 'utf-16'.
    @api(3.17)
    LspPositionEncodingKind position_encoding;

    /// Defines how text documents are synced. Is either a detailed structure
    /// defining each notification or for backwards compatibility the
    /// TextDocumentSyncKind number. If omitted it defaults to
    /// `TextDocumentSyncKind.None`.
    (LspTextDocumentSyncOptions | LspTextDocumentSyncKind) text_document_sync;

    /// Defines how notebook documents are synced.
    @api(3.17)
    (LspNotebookDocumentSyncOptions | LspNotebookDocumentSyncRegistrationOptions) notebook_document_sync;

    /// The server provides completion support.
    LspCompletionOptions completion_provider;

    /// The server provides hover support.
    (bool | LspHoverOptions) hover_provider;

    /// The server provides signature help support.
    LspSignatureHelpOptions signature_help_provider;

    /// The server provides go to declaration support.
    @api(3.14)
    (bool | LspDeclarationOptions | LspDeclarationRegistrationOptions) declaration_provider;

    /// The server provides goto definition support.
    (bool | LspDefinitionOptions) definition_provider;

    /// The server provides goto type definition support.
    @api(3.6)
    (bool | LspTypeDefinitionOptions | LspTypeDefinitionRegistrationOptions) type_definition_provider;

    /// The server provides goto implementation support.
    @api(3.6)
    (bool | LspImplementationOptions | LspImplementationRegistrationOptions) implementation_provider;

    /// The server provides find references support.
    (bool | LspReferenceOptions) references_provider;

    /// The server provides document highlight support.
    (bool | LspDocumentHighlightOptions) document_highlight_provider;

    /// The server provides document symbol support.
    (bool | LspDocumentSymbolOptions) document_symbol_provider;

    /// The server provides code actions. The `CodeActionOptions` return type is
    /// only valid if the client signals code action literal support via the
    /// property `textDocument.codeAction.codeActionLiteralSupport`.
    (bool | LspCodeActionOptions) code_action_provider;

    /// The server provides code lens.
    LspCodeLensOptions code_lens_provider;

    /// The server provides document link support.
    LspDocumentLinkOptions document_link_provider;

    /// The server provides color provider support.
    @api(3.6)
    (bool | LspDocumentColorOptions | LspDocumentColorRegistrationOptions) color_provider;

    /// The server provides document formatting.
    (bool | LspDocumentFormattingOptions) document_formatting_provider;

    /// The server provides document range formatting.
    (bool | LspDocumentRangeFormattingOptions) document_range_formatting_provider;

    /// The server provides document formatting on typing.
    LspDocumentOnTypeFormattingOptions document_on_type_formatting_provider;

    /// The server provides rename support. RenameOptions may only be
    /// specified if the client states that it supports
    /// `prepareSupport` in its initial `initialize` request.
    (bool | LspRenameOptions) rename_provider;

    /// The server provides folding provider support.
    @api(3.10)
    (bool | LspFoldingRangeOptions | LspFoldingRangeRegistrationOptions) folding_range_provider;

    /// The server provides execute command support.
    LspExecuteCommandOptions execute_command_provider;

    /// The server provides selection range support.
    @api(3.15)
    (bool | LspSelectionRangeOptions | LspSelectionRangeRegistrationOptions) selection_range_provider;

    /// The server provides linked editing range support.
    @api(3.16)
    (bool | LspLinkedEditingRangeOptions | LspLinkedEditingRangeRegistrationOptions) linked_editing_range_provider;

    /// The server provides call hierarchy support.
    @api(3.16)
    (bool | LspCallHierarchyOptions | LspCallHierarchyRegistrationOptions) call_hierarchy_provider;

    /// The server provides semantic tokens support.
    @api(3.16)
    (LspSemanticTokensOptions | LspSemanticTokensRegistrationOptions) semantic_tokens_provider;

    /// Whether server provides moniker support.
    @api(3.16)
    (bool | LspMonikerOptions | LspMonikerRegistrationOptions) moniker_provider;

    /// The server provides type hierarchy support.
    @api(3.17)
    (bool | LspTypeHierarchyOptions | LspTypeHierarchyRegistrationOptions) type_hierarchy_provider;

    /// The server provides inline values.
    @api(3.17)
    (bool | LspInlineValueOptions | LspInlineValueRegistrationOptions) inline_value_provider;

    /// The server provides inlay hints.
    @api(3.17)
    (bool | LspInlayHintOptions | LspInlayHintRegistrationOptions) inlay_hint_provider;

    /// The server has support for pull model diagnostics.
    @api(3.17)
    (LspDiagnosticOptions | LspDiagnosticRegistrationOptions) diagnostic_provider;

    /// The server provides workspace symbol support.
    (bool | LspWorkspaceSymbolOptions) workspace_symbol_provider;

    /// Workspace specific server capabilities
    struct {

        /// The server supports workspace folder.
        @api(3.6)
        LspWorkspaceFoldersServerCapabilities workspace_folders;

        /// The server is interested in file notifications/requests.
        @api(3.16)
        struct {

            /// The server is interested in receiving didCreateFiles
            /// notifications.
            LspFileOperationRegistrationOptions did_create;

            /// The server is interested in receiving willCreateFiles requests.
            LspFileOperationRegistrationOptions will_create;

            /// The server is interested in receiving didRenameFiles
            /// notifications.
            LspFileOperationRegistrationOptions did_rename;

            /// The server is interested in receiving willRenameFiles requests.
            LspFileOperationRegistrationOptions will_rename;

            /// The server is interested in receiving didDeleteFiles file
            /// notifications.
            LspFileOperationRegistrationOptions did_delete;

            /// The server is interested in receiving willDeleteFiles file
            /// requests.
            LspFileOperationRegistrationOptions will_delete;
        } file_operations;
    } workspace;

    /// Experimental server capabilities.
    LspAny experimental;
}

Initialized Notification (:arrow_right:)

The initialized notification is sent from the client to the server after the client received the result of the initialize request but before the client is sending any other request or notification to the server. The server can use the initialized notification for example to dynamically register capabilities. The initialized notification may only be sent once.

Notification:

    method: ‘initialized’
    params: InitializedParams defined as follows:

struct LspInitializedParams {
}

Register Capability (:arrow_right_hook:)

The client/registerCapability request is sent from the server to the client to register for a new capability on the client side. Not all clients need to support dynamic capability registration. A client opts in via the dynamicRegistration property on the specific client capabilities. A client can even provide dynamic registration for capability A but not for capability B (see TextDocumentClientCapabilities as an example).

Server must not register the same capability both statically through the initialize result and dynamically for the same document selector. If a server wants to support both static and dynamic registration it needs to check the client capability in the initialize request and only register the capability statically if the client doesn’t support dynamic registration for that capability.

Request:

    method: ‘client/registerCapability’
    params: RegistrationParams

Where RegistrationParams are defined as follows:


/// General parameters to register for a capability.
////
struct LspRegistration {

    /// The id used to register the request. The id can be used to deregister
    /// the request again.
    String id;

    /// The method / capability to register for.
    String method;

    /// Options necessary for the registration.
    LspAny register_options;
}


struct LspRegistrationParams {
    List<LspRegistration> registrations;
}


/// Since most of the registration options require to specify a document selector there is a base interface that can be used. See TextDocumentRegistrationOptions.

/// An example JSON-RPC message to register dynamically for the textDocument/willSaveWaitUntil feature on the client side is as follows (only details shown):

{
    "method": "client/registerCapability",
    "params": {
        "registrations": [
            {
                "id": "79eee87c-c409-4664-8102-e03263673f6f",
                "method": "textDocument/willSaveWaitUntil",
                "registerOptions": {
                    "documentSelector": [
                        { "language": "javascript" }
                    ]
                }
            }
        ]
    }
}

/// This message is sent from the server to the client and after the client has successfully executed the request further textDocument/willSaveWaitUntil requests for JavaScript text documents are sent from the client to the server.

Response:

    result: void.
    error: code and message set in case an exception happens during the request.

/// StaticRegistrationOptions can be used to register a feature in the initialize result with a given server control ID to be able to un-register the feature later on.


/// Static registration options to be returned in the initialize request.
struct LspStaticRegistrationOptions {

    /// The id used to register the request. The id can be used to deregister
    /// the request again. See also Registration#id.
    String id;
}

/// TextDocumentRegistrationOptions can be used to dynamically register for requests for a set of text documents.


/// General text document registration options.
struct LspTextDocumentRegistrationOptions {

    /// A document selector to identify the scope of the registration. If set to
    /// null the document selector provided on the client side will be used.
    (LspDocumentSelector | null) document_selector;
}

/// Unregister Capability

/// The client/unregisterCapability request is sent from the server to the client to unregister a previously registered capability.

Request:

    method: ‘client/unregisterCapability’
    params: UnregistrationParams

Where UnregistrationParams are defined as follows:


/// General parameters to unregister a capability.
struct LspUnregistration {

    /// The id used to unregister the request or notification. Usually an id
    /// provided during the register request.
    String id;

    /// The method / capability to unregister for.
    String method;
}

struct LspUnregistrationParams {

    // This should correctly be named `unregistrations`. However changing this
    // is a breaking change and needs to wait until we deliver a 4.x version
    // of the specification.
    List<Unregistration> unregisterations;
}

An example JSON-RPC message to unregister the above registered textDocument/willSaveWaitUntil feature looks like this:

{
    "method": "client/unregisterCapability",
    "params": {
        "unregisterations": [
            {
                "id": "79eee87c-c409-4664-8102-e03263673f6f",
                "method": "textDocument/willSaveWaitUntil"
            }
        ]
    }
}

Response:

    result: void.
    error: code and message set in case an exception happens during the request.

SetTrace Notification (:arrow_right:)

A notification that should be used by the client to modify the trace setting of the server.

Notification:

    method: ‘$/setTrace’
    params: SetTraceParams defined as follows:

struct LspSetTraceParams {

    /// The new value that should be assigned to the trace setting.
    LspTraceValue value;
}

LogTrace Notification (:arrow_left:)

A notification to log the trace of the server’s execution. The amount and content of these notifications depends on the current trace configuration. If trace is 'off', the server should not send any logTrace notification. If trace is 'messages', the server should not add the 'verbose' field in the LogTraceParams.

$/logTrace should be used for systematic trace reporting. For single debugging messages, the server should send window/logMessage notifications.

Notification:

    method: ‘$/logTrace’
    params: LogTraceParams defined as follows:

struct LspLogTraceParams {

    /// The message to be logged.
    String message;

    /// Additional information that can be computed if the `trace` configuration
    /// is set to `'verbose'`
    String verbose;
}

Shutdown Request (:leftwards_arrow_with_hook:)

The shutdown request is sent from the client to the server. It asks the server to shut down, but to not exit (otherwise the response might not be delivered correctly to the client). There is a separate exit notification that asks the server to exit. Clients must not send any notifications other than exit or requests to a server to which they have sent a shutdown request. Clients should also wait with sending the exit notification until they have received a response from the shutdown request.

If a server receives requests after a shutdown request those requests should error with InvalidRequest.

Request:

    method: ‘shutdown’
    params: void

Response:

    result: null
    error: code and message set in case an exception happens during shutdown request.

Exit Notification (:arrow_right:)

A notification to ask the server to exit its process. The server should exit with success code 0 if the shutdown request has been received before; otherwise with error code 1.

Notification:

    method: ‘exit’
    params: void
